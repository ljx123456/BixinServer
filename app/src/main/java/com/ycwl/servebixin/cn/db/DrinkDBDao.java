package com.ycwl.servebixin.cn.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ycwl.servebixin.cn.db.db.DrinkDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRINK_DB".
*/
public class DrinkDBDao extends AbstractDao<DrinkDB, Long> {

    public static final String TABLENAME = "DRINK_DB";

    /**
     * Properties of entity DrinkDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MealName = new Property(1, String.class, "mealName", false, "MEAL_NAME");
        public final static Property MealId = new Property(2, String.class, "mealId", false, "MEAL_ID");
        public final static Property DrinkName = new Property(3, String.class, "drinkName", false, "DRINK_NAME");
        public final static Property DrinkText = new Property(4, String.class, "drinkText", false, "DRINK_TEXT");
        public final static Property DrinkMoney = new Property(5, String.class, "drinkMoney", false, "DRINK_MONEY");
        public final static Property DrinkNum = new Property(6, String.class, "drinkNum", false, "DRINK_NUM");
        public final static Property DrinkID = new Property(7, String.class, "drinkID", false, "DRINK_ID");
        public final static Property DrinkImage = new Property(8, String.class, "drinkImage", false, "DRINK_IMAGE");
    }


    public DrinkDBDao(DaoConfig config) {
        super(config);
    }
    
    public DrinkDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRINK_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEAL_NAME\" TEXT," + // 1: mealName
                "\"MEAL_ID\" TEXT," + // 2: mealId
                "\"DRINK_NAME\" TEXT," + // 3: drinkName
                "\"DRINK_TEXT\" TEXT," + // 4: drinkText
                "\"DRINK_MONEY\" TEXT," + // 5: drinkMoney
                "\"DRINK_NUM\" TEXT," + // 6: drinkNum
                "\"DRINK_ID\" TEXT," + // 7: drinkID
                "\"DRINK_IMAGE\" TEXT);"); // 8: drinkImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRINK_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DrinkDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mealName = entity.getMealName();
        if (mealName != null) {
            stmt.bindString(2, mealName);
        }
 
        String mealId = entity.getMealId();
        if (mealId != null) {
            stmt.bindString(3, mealId);
        }
 
        String drinkName = entity.getDrinkName();
        if (drinkName != null) {
            stmt.bindString(4, drinkName);
        }
 
        String drinkText = entity.getDrinkText();
        if (drinkText != null) {
            stmt.bindString(5, drinkText);
        }
 
        String drinkMoney = entity.getDrinkMoney();
        if (drinkMoney != null) {
            stmt.bindString(6, drinkMoney);
        }
 
        String drinkNum = entity.getDrinkNum();
        if (drinkNum != null) {
            stmt.bindString(7, drinkNum);
        }
 
        String drinkID = entity.getDrinkID();
        if (drinkID != null) {
            stmt.bindString(8, drinkID);
        }
 
        String drinkImage = entity.getDrinkImage();
        if (drinkImage != null) {
            stmt.bindString(9, drinkImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DrinkDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mealName = entity.getMealName();
        if (mealName != null) {
            stmt.bindString(2, mealName);
        }
 
        String mealId = entity.getMealId();
        if (mealId != null) {
            stmt.bindString(3, mealId);
        }
 
        String drinkName = entity.getDrinkName();
        if (drinkName != null) {
            stmt.bindString(4, drinkName);
        }
 
        String drinkText = entity.getDrinkText();
        if (drinkText != null) {
            stmt.bindString(5, drinkText);
        }
 
        String drinkMoney = entity.getDrinkMoney();
        if (drinkMoney != null) {
            stmt.bindString(6, drinkMoney);
        }
 
        String drinkNum = entity.getDrinkNum();
        if (drinkNum != null) {
            stmt.bindString(7, drinkNum);
        }
 
        String drinkID = entity.getDrinkID();
        if (drinkID != null) {
            stmt.bindString(8, drinkID);
        }
 
        String drinkImage = entity.getDrinkImage();
        if (drinkImage != null) {
            stmt.bindString(9, drinkImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DrinkDB readEntity(Cursor cursor, int offset) {
        DrinkDB entity = new DrinkDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mealName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mealId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drinkName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // drinkText
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // drinkMoney
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // drinkNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // drinkID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // drinkImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DrinkDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMealName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMealId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrinkName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDrinkText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDrinkMoney(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDrinkNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDrinkID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDrinkImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DrinkDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DrinkDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DrinkDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
