package com.ycwl.servebixin.cn.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ycwl.servebixin.cn.db.db.MerchantDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_DB".
*/
public class MerchantDBDao extends AbstractDao<MerchantDB, Long> {

    public static final String TABLENAME = "MERCHANT_DB";

    /**
     * Properties of entity MerchantDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MerchantName = new Property(1, String.class, "MerchantName", false, "MERCHANT_NAME");
        public final static Property MerchantID = new Property(2, String.class, "MerchantID", false, "MERCHANT_ID");
        public final static Property MerchantImage = new Property(3, String.class, "MerchantImage", false, "MERCHANT_IMAGE");
        public final static Property BaofangType = new Property(4, String.class, "BaofangType", false, "BAOFANG_TYPE");
        public final static Property BaofangTypeName = new Property(5, String.class, "BaofangTypeName", false, "BAOFANG_TYPE_NAME");
        public final static Property BaofangID = new Property(6, String.class, "BaofangID", false, "BAOFANG_ID");
        public final static Property BaofangName = new Property(7, String.class, "BaofangName", false, "BAOFANG_NAME");
        public final static Property MerchantAdds = new Property(8, String.class, "MerchantAdds", false, "MERCHANT_ADDS");
        public final static Property BaofangPrice = new Property(9, String.class, "baofangPrice", false, "BAOFANG_PRICE");
    }


    public MerchantDBDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MERCHANT_NAME\" TEXT," + // 1: MerchantName
                "\"MERCHANT_ID\" TEXT," + // 2: MerchantID
                "\"MERCHANT_IMAGE\" TEXT," + // 3: MerchantImage
                "\"BAOFANG_TYPE\" TEXT," + // 4: BaofangType
                "\"BAOFANG_TYPE_NAME\" TEXT," + // 5: BaofangTypeName
                "\"BAOFANG_ID\" TEXT," + // 6: BaofangID
                "\"BAOFANG_NAME\" TEXT," + // 7: BaofangName
                "\"MERCHANT_ADDS\" TEXT," + // 8: MerchantAdds
                "\"BAOFANG_PRICE\" TEXT);"); // 9: baofangPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MerchantDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MerchantName = entity.getMerchantName();
        if (MerchantName != null) {
            stmt.bindString(2, MerchantName);
        }
 
        String MerchantID = entity.getMerchantID();
        if (MerchantID != null) {
            stmt.bindString(3, MerchantID);
        }
 
        String MerchantImage = entity.getMerchantImage();
        if (MerchantImage != null) {
            stmt.bindString(4, MerchantImage);
        }
 
        String BaofangType = entity.getBaofangType();
        if (BaofangType != null) {
            stmt.bindString(5, BaofangType);
        }
 
        String BaofangTypeName = entity.getBaofangTypeName();
        if (BaofangTypeName != null) {
            stmt.bindString(6, BaofangTypeName);
        }
 
        String BaofangID = entity.getBaofangID();
        if (BaofangID != null) {
            stmt.bindString(7, BaofangID);
        }
 
        String BaofangName = entity.getBaofangName();
        if (BaofangName != null) {
            stmt.bindString(8, BaofangName);
        }
 
        String MerchantAdds = entity.getMerchantAdds();
        if (MerchantAdds != null) {
            stmt.bindString(9, MerchantAdds);
        }
 
        String baofangPrice = entity.getBaofangPrice();
        if (baofangPrice != null) {
            stmt.bindString(10, baofangPrice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MerchantDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MerchantName = entity.getMerchantName();
        if (MerchantName != null) {
            stmt.bindString(2, MerchantName);
        }
 
        String MerchantID = entity.getMerchantID();
        if (MerchantID != null) {
            stmt.bindString(3, MerchantID);
        }
 
        String MerchantImage = entity.getMerchantImage();
        if (MerchantImage != null) {
            stmt.bindString(4, MerchantImage);
        }
 
        String BaofangType = entity.getBaofangType();
        if (BaofangType != null) {
            stmt.bindString(5, BaofangType);
        }
 
        String BaofangTypeName = entity.getBaofangTypeName();
        if (BaofangTypeName != null) {
            stmt.bindString(6, BaofangTypeName);
        }
 
        String BaofangID = entity.getBaofangID();
        if (BaofangID != null) {
            stmt.bindString(7, BaofangID);
        }
 
        String BaofangName = entity.getBaofangName();
        if (BaofangName != null) {
            stmt.bindString(8, BaofangName);
        }
 
        String MerchantAdds = entity.getMerchantAdds();
        if (MerchantAdds != null) {
            stmt.bindString(9, MerchantAdds);
        }
 
        String baofangPrice = entity.getBaofangPrice();
        if (baofangPrice != null) {
            stmt.bindString(10, baofangPrice);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MerchantDB readEntity(Cursor cursor, int offset) {
        MerchantDB entity = new MerchantDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MerchantName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MerchantID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MerchantImage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BaofangType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BaofangTypeName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BaofangID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // BaofangName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MerchantAdds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // baofangPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MerchantDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMerchantName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMerchantID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMerchantImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBaofangType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBaofangTypeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBaofangID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBaofangName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMerchantAdds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBaofangPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MerchantDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MerchantDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MerchantDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
